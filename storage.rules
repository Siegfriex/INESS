rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // 사용자 프로필 이미지
    match /users/{userId}/profile/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // 파일 크기 및 타입 제한
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && request.resource.size < 5 * 1024 * 1024  // 5MB 제한
        && request.resource.contentType.matches('image/.*');
    }
    
    // 감정 기록 첨부 파일 (이미지, 음성)
    match /users/{userId}/emotions/{emotionId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // 미디어 파일 제한
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && request.resource.size < 50 * 1024 * 1024  // 50MB 제한
        && (request.resource.contentType.matches('image/.*') 
            || request.resource.contentType.matches('audio/.*'));
    }
    
    // 일기 첨부 파일
    match /users/{userId}/journals/{journalId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // 파일 제한
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && request.resource.size < 20 * 1024 * 1024  // 20MB 제한
        && (request.resource.contentType.matches('image/.*') 
            || request.resource.contentType.matches('video/.*')
            || request.resource.contentType.matches('audio/.*'));
    }
    
    // 상담 세션 파일 공유
    match /sessions/{sessionId}/{allPaths=**} {
      allow read, write: if request.auth != null 
        && (isSessionParticipant(sessionId, request.auth.uid) 
            || isExpert(request.auth.uid));
      
      // 세션 파일 제한
      allow write: if request.auth != null 
        && request.resource.size < 100 * 1024 * 1024  // 100MB 제한
        && isSessionParticipant(sessionId, request.auth.uid);
    }
    
    // 전문가 자격증명 문서
    match /experts/{expertId}/credentials/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == expertId;
      allow read: if isAdmin(request.auth.uid);
      
      // 문서 파일 제한
      allow write: if request.auth != null 
        && request.auth.uid == expertId
        && request.resource.size < 10 * 1024 * 1024  // 10MB 제한
        && (request.resource.contentType.matches('image/.*')
            || request.resource.contentType.matches('application/pdf'));
    }
    
    // 공개 컨텐츠 (교육 자료 등)
    match /public/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if isAdmin(request.auth.uid) || isExpert(request.auth.uid);
    }
    
    // 시스템 백업 및 관리자 파일
    match /system/{allPaths=**} {
      allow read, write: if isAdmin(request.auth.uid);
    }
    
    // 헬퍼 함수들
    function isAdmin(uid) {
      return firestore.get(/databases/(default)/documents/admins/$(uid)).data != null;
    }
    
    function isExpert(uid) {
      return firestore.get(/databases/(default)/documents/experts/$(uid)).data.verified == true;
    }
    
    function isSessionParticipant(sessionId, uid) {
      let sessionData = firestore.get(/databases/(default)/documents/sessions/$(sessionId)).data;
      return sessionData.userId == uid || sessionData.expertId == uid;
    }
  }
}